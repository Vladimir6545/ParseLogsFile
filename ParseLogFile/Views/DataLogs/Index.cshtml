@model PagedList.IPagedList<ParseLogFile.Models.ViewsModels.LogsViewModel>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
<style>
    .progress {
        margin: 15px;
    }

        .progress .progress-bar.active {
            font-weight: 700;
            animation: progress-bar-stripes .5s linear infinite;
        }

    .dotdotdot:after {
        font-weight: 300;
        content: '...';
        display: inline-block;
        width: 20px;
        text-align: left;
        animation: dotdotdot 1.5s linear infinite;
    }

    @@keyframes dotdotdot {
        0% {
            content: '...';
        }

        25% {
            content: '';
        }

        50% {
            content: '.';
        }

        75% {
            content: '..';
        }
    }
</style>

<br />
<form id="uploader">
    <input id="fileInput" type="file" multiple>
    <br />
    <input type="submit" value="Upload file" />
</form>

<div style="text-align:right">
    @using (Html.BeginForm("ClearData", "DataLogs", FormMethod.Get))
    {
        <p>
            <input type="submit" value="Clear data" />
        </p>
    }
</div>

@using (Html.BeginForm())
{
    <p>
        Find by IP or name file: @Html.TextBox("Search", ViewBag.CurrentFilter as string)
        <input type="submit" value="search" />
    </p>
}
<br />

<div id="bar" style="display:none;">
    <div class="progress">
        <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
            <span>Please wait<span class="dotdotdot"></span></span>
        </div>
    </div>
</div>

<br />
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Date request", "Index", new { sortOrder = ViewBag.DateSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Time request", "Index", new { sortOrder = ViewBag.TimeSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            Type request
        </th>
        <th>
            Name of the requested file
        </th>
        <th>
            Path to the requested file
        </th>
        <th>
            @Html.ActionLink("IP address from which the request was made", "Index", new { sortOrder = ViewBag.IPSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Name of the network that owns this IP", "Index", new { sortOrder = ViewBag.NetworkSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Transmitted bytes", "Index", new { sortOrder = ViewBag.SizeSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Request result", "Index", new { sortOrder = ViewBag.RezultSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
    </tr>

    @if (Model != null)
    {
        foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Time)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TypeRequest)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.descriptionFile.NominationFile)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.descriptionFile.PathToFile)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ip.IP)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ip.NominationNetwork)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TransmittedBytes)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RezultRequest)
                </td>
            </tr>
        }
    }
</table>

<br />
<div id='Paging' style="text-align:center">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
</div>

<script>
    document.getElementById('uploader').onsubmit = function () {
        var formdata = new FormData();
        var fileInput = document.getElementById('fileInput');
        for (i = 0; i < fileInput.files.length; i++) {
            formdata.append(fileInput.files[i].name, fileInput.files[i]);
        }
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/DataLogs/Upload');
        xhr.send(formdata);
        move();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                alert(xhr.responseText);
                window.location.href = '/DataLogs/Index/';
            }
        }
        return false;
    }

    function move() {
        if (document.getElementById("bar").style.display == "none")
        { document.getElementById("bar").style.display = "block" }
        else
        { document.getElementById("bar").style.display = "none" }
    }

</script>
